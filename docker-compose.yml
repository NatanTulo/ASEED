services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: aseed-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aseed-network
    volumes:
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /logs/zookeeper.log
        
        # Uruchom Zookeeper z przekierowaniem logów
        /etc/confluent/docker/run 2>&1 | tee -a /logs/zookeeper.log
      "
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: aseed-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - aseed-network
    volumes:
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /logs/kafka.log
        
        # Uruchom Kafka z przekierowaniem logów
        /etc/confluent/docker/run 2>&1 | tee -a /logs/kafka.log
      "
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-master
    container_name: aseed-spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    networks:
      - aseed-network
    volumes:
      - ./src:/opt/spark-apps
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /logs/spark-master.log
        
        # Uruchom Spark Master z przekierowaniem logów (usuń kody kolorów)
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a /logs/spark-master.log
      "
    healthcheck:
      test: ["CMD", "python3", "-c", "import socket; socket.create_connection(('localhost', 8080), timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-worker
    container_name: aseed-spark-worker
    depends_on:
      spark-master:
        condition: service_started
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1g
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_HOST=spark-worker
    networks:
      - aseed-network
    volumes:
      - ./src:/opt/spark-apps
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /logs/spark-worker.log
        
        # Uruchom Spark Worker z przekierowaniem logów (usuń kody kolorów)
        /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a /logs/spark-worker.log
      "

  order-simulator:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: aseed-order-simulator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=orders
      - ORDERS_PER_SECOND=2
      - PRODUCT_COUNT=50
    networks:
      - aseed-network
    volumes:
      - ./logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /app/logs/order_simulator.log
        
        # Uruchom simulator z przekierowaniem logów (usuń kody kolorów)
        python src/order_simulator.py 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a /app/logs/order_simulator.log
      "

  data-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.spark-app
    container_name: aseed-data-analyzer
    depends_on:
      kafka:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - aseed-network
    volumes:
      - ./src:/opt/spark-apps
      - ./logs:/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /logs/data_analyzer.log
        
        # Uruchom analyzer z przekierowaniem logów (usuń kody kolorów)
        python /opt/spark-apps/data_analyzer.py 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a /logs/data_analyzer.log
      "
    healthcheck:
      test: ["CMD", "pgrep", "-f", "data_analyzer.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: aseed-web-dashboard
    ports:
      - "5005:5005"
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5005
    networks:
      - aseed-network
    volumes:
      - ./logs:/app/logs
      - ./src/templates:/app/src/templates
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        # Utwórz plik logu
        touch /app/logs/dashboard.log
        
        # Uruchom dashboard z przekierowaniem logów (usuń kody kolorów)
        python src/web_dashboard.py 2>&1 | sed 's/\x1b\[[0-9;]*m//g' | tee -a /app/logs/dashboard.log
      "

networks:
  aseed-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data:
  spark-logs:
